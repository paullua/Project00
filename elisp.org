#+TITLE: Elisp Code
#+LANGUAGE: en
#+OPTIONS: H:4 num:nil toc:nil \n:nil @:t ::t |:t ^:t *:t TeX:t LaTeX:t
#+OPTIONS: html-postamble:nil
#+STARTUP: showeverything entitiespretty

NOTE: Comment your code, and verify it works for "breaking cases" i.e. 0! = 1.

* Factorial Code
** TODO Code
#+BEGIN_SRC emacs-lisp
(require 'cl)
(defun factorial (integer)
   (if (= 1 integer) 1
      (* integer (factorial (- integer 1)))))
#+END_SRC

#+RESULTS:
: factorial

** Test cases

#+BEGIN_SRC elisp
(factorial 1)
#+END_SRC

#+RESULTS:
: 1

#+BEGIN_SRC elisp
(factorial 2)
#+END_SRC

#+RESULTS:
: 2

#+BEGIN_SRC elisp
(factorial 3)
#+END_SRC

#+RESULTS:
: 6

#+BEGIN_SRC elisp
(factorial 4)
#+END_SRC

#+RESULTS:
: 24

#+BEGIN_SRC elisp
(factorial 5)
#+END_SRC

#+RESULTS:
: 120

#+BEGIN_SRC elisp
(factorial 6)
#+END_SRC

#+RESULTS:
: 720

#+BEGIN_SRC elisp
(factorial 7)
#+END_SRC

#+RESULTS:
: 5040

#+BEGIN_SRC elisp
(factorial 8)
#+END_SRC

#+RESULTS:
: 40320

#+BEGIN_SRC elisp
(factorial 9)
#+END_SRC

#+RESULTS:
: 362880

#+BEGIN_SRC elisp
(factorial 10)
#+END_SRC

#+RESULTS:
: 3628800

#+BEGIN_SRC elisp
(factorial 11)
#+END_SRC

#+RESULTS:
: 39916800

#+BEGIN_SRC elisp
(factorial 12)
#+END_SRC

#+RESULTS:
: 479001600

#+BEGIN_SRC elisp
(factorial 13)
#+END_SRC

#+RESULTS:
: 6227020800

#+BEGIN_SRC elisp
(factorial 14)
#+END_SRC

#+RESULTS:
: 87178291200

#+BEGIN_SRC elisp
(factorial 15)
#+END_SRC

#+RESULTS:
: 1307674368000

#+BEGIN_SRC elisp
(factorial 16)
#+END_SRC

#+RESULTS:
: 20922789888000

#+BEGIN_SRC elisp
(factorial 17)
#+END_SRC

#+RESULTS:
: 355687428096000

#+BEGIN_SRC elisp
(factorial 18)
#+END_SRC

#+RESULTS:
: 6402373705728000

#+BEGIN_SRC elisp
(factorial 19)
#+END_SRC

#+RESULTS:
: 121645100408832000

#+BEGIN_SRC elisp
(factorial 20)
#+END_SRC

#+RESULTS:
: -2178784010250747904

#+BEGIN_SRC elisp
(factorial 264)
#+END_SRC

#+RESULTS:
: 0

#+BEGIN_SRC elisp
(factorial 265)
#+END_SRC

** How big a number will make your computer freeze?
   20 is where the factorial function breaks and goes negative. Great job elisp.

* "Real-World" function with mapcar
** What is mapcar
"mapcar is a function that calls its first argument with each element of its second argument, in turn. The second argument must
be a sequence. The ' map ' part of the name comes from the mathematical phrase, \“mapping over a domain\”, meaning to apply a 
function to each of the elements in a domain."
** Code
#+BEGIN_SRC emacs-lisp
(defun one (x) (+ x 1))
#+END_SRC

#+RESULTS:
: one
#+BEGIN_SRC elisp
(mapcar 'one '(1 2 3 4 5 6))
#+END_SRC

#+RESULTS:
| 2 | 3 | 4 | 5 | 6 | 7 |

* Loop function
** Code
#+BEGIN_SRC emacs-lisp
(require 'cl)
;; This is basically a different version of the factorial function using a loop instead
;; of recursion
(defun do-the-thing (x) 
   (setq r 1)
   (loop for i from 1 to x
       do (setq r (* i r)))
    r)
(= (do-the-thing 9)(factorial 9)) ;; Shows that do-the-thing and factorial are equal
#+END_SRC

#+RESULTS:
: t
